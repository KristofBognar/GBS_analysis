% REPLACE_NO2_DSCDS Replace NO2 dSCDs in QDOAS tables (originally using
% 425-450 nm) with new NO2 dSCDs (using 425-490 nm). Old dSCDs are saved as
% NO2_425450


% instr='ut-gbs'; % already done
instr='pearl-gbs';


for year=2006:2010
    
if strcmp(instr,'ut-gbs') && year<2017
    merged='_merged';
else
    merged='';
end
    
disp(['Processing ' num2str(year)])

% new NO2 file
filename=['/home/kristof/aurora/eureka/' instr '/' num2str(year) '/QDOAS_output/NO2_425-490.ASC'];

% skip year if new NO2 file doesn't exist
if ~exist(filename,'file'), continue, end

% load QDOAS table
tablename=['/home/kristof/work/GBS/QDOAS_results/yearly_tables/' upper(instr) '_' num2str(year) merged '.mat'];
load(tablename);

% skip if file already has NO2_425_450 columns
tmp=data.Properties.VariableNames;
ind=strfind(tmp,'NO2_425450');
already_done=find(not(cellfun('isempty', ind)));
if ~isempty(already_done), continue, end

% find indices of NO2 columns
ind=strfind(tmp,'NO2');
no2_col_inds=find(not(cellfun('isempty', ind)));

no2_start=no2_col_inds(1);
no2_end=no2_col_inds(end);


%% Import new NO2 data from file.
% Script for importing data from the following text file:
%
%    /home/kristof/aurora/eureka/ut-gbs/2000/QDOAS_output/NO2_425-490.ASC
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/17 13:26:30

% Initialize variables.
% filename = '/home/kristof/aurora/eureka/ut-gbs/2000/QDOAS_output/NO2_425-490.ASC';
delimiter = '\t';
startRow = 3;

% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(filename,'r');

% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

% Close the text file.
fclose(fileID);

% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[11,12]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[11,12]);
blankDates = blankDates(:,[11,12]);
invalidDates = invalidDates(:,[11,12]);

% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]);

% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

% Create output variable
NO2_425490 = table;
NO2_425490.SpecNo = cell2mat(rawNumericColumns(:, 1));
NO2_425490.Year = cell2mat(rawNumericColumns(:, 2));
NO2_425490.Fractionalday = cell2mat(rawNumericColumns(:, 3));
NO2_425490.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
NO2_425490.Scans = cell2mat(rawNumericColumns(:, 5));
NO2_425490.Tint = cell2mat(rawNumericColumns(:, 6));
NO2_425490.SZA = cell2mat(rawNumericColumns(:, 7));
NO2_425490.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 8));
NO2_425490.Elevviewingangle = cell2mat(rawNumericColumns(:, 9));
NO2_425490.Azimviewingangle = cell2mat(rawNumericColumns(:, 10));
NO2_425490.DateDDMMYYYY = dates{:, 1};
NO2_425490.Timehhmmss = dates{:, 2};
NO2_425490.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 11));
NO2_425490.NO2RMS = cell2mat(rawNumericColumns(:, 12));
NO2_425490.NO2RefZm = cell2mat(rawNumericColumns(:, 13));
NO2_425490.NO2processing_error = cell2mat(rawNumericColumns(:, 14));
NO2_425490.NO2SlColh2o = cell2mat(rawNumericColumns(:, 15));
NO2_425490.NO2SlErrh2o = cell2mat(rawNumericColumns(:, 16));
NO2_425490.NO2SlColo4 = cell2mat(rawNumericColumns(:, 17));
NO2_425490.NO2SlErro4 = cell2mat(rawNumericColumns(:, 18));
NO2_425490.NO2SlColRing = cell2mat(rawNumericColumns(:, 19));
NO2_425490.NO2SlErrRing = cell2mat(rawNumericColumns(:, 20));
NO2_425490.NO2SlColno2 = cell2mat(rawNumericColumns(:, 21));
NO2_425490.NO2SlErrno2 = cell2mat(rawNumericColumns(:, 22));
NO2_425490.NO2SlColo3 = cell2mat(rawNumericColumns(:, 23));
NO2_425490.NO2SlErro3 = cell2mat(rawNumericColumns(:, 24));
NO2_425490.NO2ShiftSpectrum = cell2mat(rawNumericColumns(:, 25));
NO2_425490.NO2StretchSpectrum1 = cell2mat(rawNumericColumns(:, 26));
NO2_425490.NO2StretchSpectrum2 = cell2mat(rawNumericColumns(:, 27));


% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% NO2425490.DateDDMMYYYY=datenum(NO2425490.DateDDMMYYYY);
% NO2425490.Timehhmmss=datenum(NO2425490.Timehhmmss);

% Clear temporary variables
clearvars delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me dateFormats dateFormatIndex dates blankDates anyBlankDates invalidDates anyInvalidDates rawNumericColumns R;


%% match up QDOAS table and new NO2 data

% pair up old and new data line by line
[~,ind_old,ind_new] = intersect(data(:,1:4),NO2_425490(:,1:4));

% find lines not present in new data (data missing for a few spectra on a few days,
% due to weird qdoas quirks)
ind_missing=setdiff(1:size(data,1),ind_old)';

% copy headers to new table (size of QDOAS data)
no2_new = cell2table(repmat({0},size(data,1),16), 'VariableNames', NO2_425490.Properties.VariableNames(14:29) );

% assign new no2 lines that match old QDOAS file
no2_new(ind_old,:)=NO2_425490(ind_new,14:29);

% if new no2 data is missing, use old no2
if ~isempty(ind_missing)
    no2_new(ind_missing,:)=data(ind_missing,no2_start:no2_end);
end


% debug
% no2_new = cell2table(repmat({0},size(data,1),20), 'VariableNames', NO2_425490.Properties.VariableNames([1:4,14:29]) );
% no2_new(ind_old,:)=NO2_425490(ind_new,[1:4,14:29]);



%% change old NO2 col names and merge files

for i=no2_start:no2_end

    tmp=data.Properties.VariableNames{i};
    tmp=['NO2_425450' tmp(4:end)];
    
    data.Properties.VariableNames{i}=tmp;
    
end

data=[data(:,1:no2_start-1), no2_new, data(:,no2_start:end)];

save(tablename,'data');
clearvars data no2_new NO2_425490

end

