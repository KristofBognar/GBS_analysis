function data = read_qdoas_table__read_file(fname,ftype)
%data = read_qdoas_table__read_file(fname,ftype)
% Read QDOAS output file into table
% INPUT:    file name
%           type of file:   1: UT-GBS VIS reanalysis (4*O4, O3 without X.xs, NO2)
%                           2: UT-GBS VIS O3 with X.xs
%                           3: PEARL-GBS VIS reanalysis (O3 with and without X.xs included)
%                           4: UT-GBS UV reanalysis (only NO2) 
%                           5: PEARL-GBS UV reanalysis (NO2 and O3)
% OUTPUT:   data in table format
%
% Notes:    O3 data with X.xs is named O3_X in QDOAS files, but in the
%           table headers O3_X is replaced with O3, and O3 (no X.xs in QDOAS files)
%           is replaced with O3_noX
%
% Created by Kristof Bognar, October 2017

%% select function to read data
% read UT-GBS reanalysis data
if ftype==1
    data=read_utgbs(fname);
    
% read UT-GBS O3X data    
elseif ftype==2
    data=read_utgbs_o3x(fname);

% read PGBS reanalysis data    
elseif ftype==3
    data=read_pgbs(fname);
  
% read UT-GBS UV data    
elseif ftype==4
    data=read_utgbs_uv(fname);

% read PEARL-GBS UV data    
elseif ftype==5
    data=read_pgbs_uv(fname);

end

%% functions to import each file type
function temp = read_utgbs_o3x(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   TEMP = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   TEMP = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   temp = importfile('temp.ASC', 2, 35783);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/08/25 16:57:04

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[11,12]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[11,12]);
blankDates = blankDates(:,[11,12]);
invalidDates = invalidDates(:,[11,12]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
temp = table;
temp.SpecNo = cell2mat(rawNumericColumns(:, 1));
temp.Year = cell2mat(rawNumericColumns(:, 2));
temp.Fractionalday = cell2mat(rawNumericColumns(:, 3));
temp.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
temp.Scans = cell2mat(rawNumericColumns(:, 5));
temp.Tint = cell2mat(rawNumericColumns(:, 6));
temp.SZA = cell2mat(rawNumericColumns(:, 7));
temp.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 8));
temp.Elevviewingangle = cell2mat(rawNumericColumns(:, 9));
temp.Azimviewingangle = cell2mat(rawNumericColumns(:, 10));

temp.DateDDMMYYYY = dates{:, 1};
temp.Timehhmmss = dates{:, 2};
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).
% temp.DateDDMMYYYY=datenum(temp.DateDDMMYYYY);
% temp.Timehhmmss=datenum(temp.Timehhmmss);

temp.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 11));
% temp.O3_XRMS = cell2mat(rawNumericColumns(:, 12));
% temp.O3_XRefZm = cell2mat(rawNumericColumns(:, 13));
% temp.O3_Xprocessing_error = cell2mat(rawNumericColumns(:, 14));
% temp.O3_XSlColh2o = cell2mat(rawNumericColumns(:, 15));
% temp.O3_XSlErrh2o = cell2mat(rawNumericColumns(:, 16));
% temp.O3_XSlColo4 = cell2mat(rawNumericColumns(:, 17));
% temp.O3_XSlErro4 = cell2mat(rawNumericColumns(:, 18));
% temp.O3_XSlColRing = cell2mat(rawNumericColumns(:, 19));
% temp.O3_XSlErrRing = cell2mat(rawNumericColumns(:, 20));
% temp.O3_XSlColno2 = cell2mat(rawNumericColumns(:, 21));
% temp.O3_XSlErrno2 = cell2mat(rawNumericColumns(:, 22));
% temp.O3_XSlColo3 = cell2mat(rawNumericColumns(:, 23));
% temp.O3_XSlErro3 = cell2mat(rawNumericColumns(:, 24));
% temp.O3_XSlColX = cell2mat(rawNumericColumns(:, 25));
% temp.O3_XSlErrX = cell2mat(rawNumericColumns(:, 26));
% temp.O3_XSlColx0 = cell2mat(rawNumericColumns(:, 27));
% temp.O3_XSlErrx0 = cell2mat(rawNumericColumns(:, 28));
% temp.O3_XSlColx1 = cell2mat(rawNumericColumns(:, 29));
% temp.O3_XSlErrx1 = cell2mat(rawNumericColumns(:, 30));
% temp.O3_XSlColx2 = cell2mat(rawNumericColumns(:, 31));
% temp.O3_XSlErrx2 = cell2mat(rawNumericColumns(:, 32));
% temp.O3_XSlColx3 = cell2mat(rawNumericColumns(:, 33));
% temp.O3_XSlErrx3 = cell2mat(rawNumericColumns(:, 34));
% temp.O3_XShiftSpectrum = cell2mat(rawNumericColumns(:, 35));
% temp.O3_XStretchSpectrum1 = cell2mat(rawNumericColumns(:, 36));
% temp.O3_XStretchSpectrum2 = cell2mat(rawNumericColumns(:, 37));
temp.O3RMS = cell2mat(rawNumericColumns(:, 12));
temp.O3RefZm = cell2mat(rawNumericColumns(:, 13));
temp.O3processing_error = cell2mat(rawNumericColumns(:, 14));
temp.O3SlColh2o = cell2mat(rawNumericColumns(:, 15));
temp.O3SlErrh2o = cell2mat(rawNumericColumns(:, 16));
temp.O3SlColo4 = cell2mat(rawNumericColumns(:, 17));
temp.O3SlErro4 = cell2mat(rawNumericColumns(:, 18));
temp.O3SlColRing = cell2mat(rawNumericColumns(:, 19));
temp.O3SlErrRing = cell2mat(rawNumericColumns(:, 20));
temp.O3SlColno2 = cell2mat(rawNumericColumns(:, 21));
temp.O3SlErrno2 = cell2mat(rawNumericColumns(:, 22));
temp.O3SlColo3 = cell2mat(rawNumericColumns(:, 23));
temp.O3SlErro3 = cell2mat(rawNumericColumns(:, 24));
temp.O3SlColX = cell2mat(rawNumericColumns(:, 25));
temp.O3SlErrX = cell2mat(rawNumericColumns(:, 26));
temp.O3SlColx0 = cell2mat(rawNumericColumns(:, 27));
temp.O3SlErrx0 = cell2mat(rawNumericColumns(:, 28));
temp.O3SlColx1 = cell2mat(rawNumericColumns(:, 29));
temp.O3SlErrx1 = cell2mat(rawNumericColumns(:, 30));
temp.O3SlColx2 = cell2mat(rawNumericColumns(:, 31));
temp.O3SlErrx2 = cell2mat(rawNumericColumns(:, 32));
temp.O3SlColx3 = cell2mat(rawNumericColumns(:, 33));
temp.O3SlErrx3 = cell2mat(rawNumericColumns(:, 34));
temp.O3ShiftSpectrum = cell2mat(rawNumericColumns(:, 35));
temp.O3StretchSpectrum1 = cell2mat(rawNumericColumns(:, 36));
temp.O3StretchSpectrum2 = cell2mat(rawNumericColumns(:, 37));
temp.Fluxes355 = cell2mat(rawNumericColumns(:, 38));
temp.Fluxes360 = cell2mat(rawNumericColumns(:, 39));
temp.Fluxes380 = cell2mat(rawNumericColumns(:, 40));
temp.Fluxes385 = cell2mat(rawNumericColumns(:, 41));
temp.Fluxes390 = cell2mat(rawNumericColumns(:, 42));
temp.Fluxes405 = cell2mat(rawNumericColumns(:, 43));
temp.Fluxes420 = cell2mat(rawNumericColumns(:, 44));
temp.Fluxes425 = cell2mat(rawNumericColumns(:, 45));
temp.Fluxes435 = cell2mat(rawNumericColumns(:, 46));
temp.Fluxes440 = cell2mat(rawNumericColumns(:, 47));
temp.Fluxes445 = cell2mat(rawNumericColumns(:, 48));
temp.Fluxes450 = cell2mat(rawNumericColumns(:, 49));
temp.Fluxes455 = cell2mat(rawNumericColumns(:, 50));
temp.Fluxes460 = cell2mat(rawNumericColumns(:, 51));
temp.Fluxes470 = cell2mat(rawNumericColumns(:, 52));
temp.Fluxes490 = cell2mat(rawNumericColumns(:, 53));
temp.Fluxes500 = cell2mat(rawNumericColumns(:, 54));
temp.Fluxes532 = cell2mat(rawNumericColumns(:, 55));
temp.Fluxes550 = cell2mat(rawNumericColumns(:, 56));

function temp = read_pgbs(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   temp = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   temp = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   temp = importfile('PEARL-GBS_2006_reanalysis_VIS.ASC', 3, 8512);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/10/23 11:13:13

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[11,12]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[11,12]);
blankDates = blankDates(:,[11,12]);
invalidDates = invalidDates(:,[11,12]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
temp = table;
temp.SpecNo = cell2mat(rawNumericColumns(:, 1));
temp.Year = cell2mat(rawNumericColumns(:, 2));
temp.Fractionalday = cell2mat(rawNumericColumns(:, 3));
temp.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
temp.Scans = cell2mat(rawNumericColumns(:, 5));
temp.Tint = cell2mat(rawNumericColumns(:, 6));
temp.SZA = cell2mat(rawNumericColumns(:, 7));
temp.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 8));
temp.Elevviewingangle = cell2mat(rawNumericColumns(:, 9));
temp.Azimviewingangle = cell2mat(rawNumericColumns(:, 10));

temp.DateDDMMYYYY = dates{:, 1};
temp.Timehhmmss = dates{:, 2};
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).
% temp.DateDDMMYYYY=datenum(temp.DateDDMMYYYY);temp.Timehhmmss=datenum(temp.Timehhmmss);

temp.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 11));
temp.O4_VIS_293_a203RMS = cell2mat(rawNumericColumns(:, 12));
temp.O4_VIS_293_a203RefZm = cell2mat(rawNumericColumns(:, 13));
temp.O4_VIS_293_a203processing_error = cell2mat(rawNumericColumns(:, 14));
temp.O4_VIS_293_a203SlColno2 = cell2mat(rawNumericColumns(:, 15));
temp.O4_VIS_293_a203SlErrno2 = cell2mat(rawNumericColumns(:, 16));
temp.O4_VIS_293_a203SlColno2a = cell2mat(rawNumericColumns(:, 17));
temp.O4_VIS_293_a203SlErrno2a = cell2mat(rawNumericColumns(:, 18));
temp.O4_VIS_293_a203SlColo3 = cell2mat(rawNumericColumns(:, 19));
temp.O4_VIS_293_a203SlErro3 = cell2mat(rawNumericColumns(:, 20));
temp.O4_VIS_293_a203SlColo4 = cell2mat(rawNumericColumns(:, 21));
temp.O4_VIS_293_a203SlErro4 = cell2mat(rawNumericColumns(:, 22));
temp.O4_VIS_293_a203SlColo4a = cell2mat(rawNumericColumns(:, 23));
temp.O4_VIS_293_a203SlErro4a = cell2mat(rawNumericColumns(:, 24));
temp.O4_VIS_293_a203SlColh2o = cell2mat(rawNumericColumns(:, 25));
temp.O4_VIS_293_a203SlErrh2o = cell2mat(rawNumericColumns(:, 26));
temp.O4_VIS_293_a203SlColRing = cell2mat(rawNumericColumns(:, 27));
temp.O4_VIS_293_a203SlErrRing = cell2mat(rawNumericColumns(:, 28));
temp.O4_VIS_293_a203SlColx0 = cell2mat(rawNumericColumns(:, 29));
temp.O4_VIS_293_a203SlErrx0 = cell2mat(rawNumericColumns(:, 30));
temp.O4_VIS_293_a203SlColx1 = cell2mat(rawNumericColumns(:, 31));
temp.O4_VIS_293_a203SlErrx1 = cell2mat(rawNumericColumns(:, 32));
temp.O4_VIS_293_a203SlColx2 = cell2mat(rawNumericColumns(:, 33));
temp.O4_VIS_293_a203SlErrx2 = cell2mat(rawNumericColumns(:, 34));
temp.O4_VIS_293_a203SlColx3 = cell2mat(rawNumericColumns(:, 35));
temp.O4_VIS_293_a203SlErrx3 = cell2mat(rawNumericColumns(:, 36));
temp.O4_VIS_293_a203SlColx4 = cell2mat(rawNumericColumns(:, 37));
temp.O4_VIS_293_a203SlErrx4 = cell2mat(rawNumericColumns(:, 38));
temp.O4_VIS_293_a203SlColx5 = cell2mat(rawNumericColumns(:, 39));
temp.O4_VIS_293_a203SlErrx5 = cell2mat(rawNumericColumns(:, 40));
temp.O4_VIS_293_a203OffsetConstant = cell2mat(rawNumericColumns(:, 41));
temp.O4_VIS_293_a203ErrOffsetConstant = cell2mat(rawNumericColumns(:, 42));
temp.O4_VIS_293_a203ShiftSpectrum = cell2mat(rawNumericColumns(:, 43));
temp.O4_VIS_293_a203StretchSpectrum1 = cell2mat(rawNumericColumns(:, 44));
temp.O4_VIS_293_a203StretchSpectrum2 = cell2mat(rawNumericColumns(:, 45));
temp.O4_VIS_203_a293RMS = cell2mat(rawNumericColumns(:, 46));
temp.O4_VIS_203_a293RefZm = cell2mat(rawNumericColumns(:, 47));
temp.O4_VIS_203_a293processing_error = cell2mat(rawNumericColumns(:, 48));
temp.O4_VIS_203_a293SlColno2 = cell2mat(rawNumericColumns(:, 49));
temp.O4_VIS_203_a293SlErrno2 = cell2mat(rawNumericColumns(:, 50));
temp.O4_VIS_203_a293SlColno2a = cell2mat(rawNumericColumns(:, 51));
temp.O4_VIS_203_a293SlErrno2a = cell2mat(rawNumericColumns(:, 52));
temp.O4_VIS_203_a293SlColo3 = cell2mat(rawNumericColumns(:, 53));
temp.O4_VIS_203_a293SlErro3 = cell2mat(rawNumericColumns(:, 54));
temp.O4_VIS_203_a293SlColo4 = cell2mat(rawNumericColumns(:, 55));
temp.O4_VIS_203_a293SlErro4 = cell2mat(rawNumericColumns(:, 56));
temp.O4_VIS_203_a293SlColo4a = cell2mat(rawNumericColumns(:, 57));
temp.O4_VIS_203_a293SlErro4a = cell2mat(rawNumericColumns(:, 58));
temp.O4_VIS_203_a293SlColh2o = cell2mat(rawNumericColumns(:, 59));
temp.O4_VIS_203_a293SlErrh2o = cell2mat(rawNumericColumns(:, 60));
temp.O4_VIS_203_a293SlColRing = cell2mat(rawNumericColumns(:, 61));
temp.O4_VIS_203_a293SlErrRing = cell2mat(rawNumericColumns(:, 62));
temp.O4_VIS_203_a293SlColx0 = cell2mat(rawNumericColumns(:, 63));
temp.O4_VIS_203_a293SlErrx0 = cell2mat(rawNumericColumns(:, 64));
temp.O4_VIS_203_a293SlColx1 = cell2mat(rawNumericColumns(:, 65));
temp.O4_VIS_203_a293SlErrx1 = cell2mat(rawNumericColumns(:, 66));
temp.O4_VIS_203_a293SlColx2 = cell2mat(rawNumericColumns(:, 67));
temp.O4_VIS_203_a293SlErrx2 = cell2mat(rawNumericColumns(:, 68));
temp.O4_VIS_203_a293SlColx3 = cell2mat(rawNumericColumns(:, 69));
temp.O4_VIS_203_a293SlErrx3 = cell2mat(rawNumericColumns(:, 70));
temp.O4_VIS_203_a293SlColx4 = cell2mat(rawNumericColumns(:, 71));
temp.O4_VIS_203_a293SlErrx4 = cell2mat(rawNumericColumns(:, 72));
temp.O4_VIS_203_a293SlColx5 = cell2mat(rawNumericColumns(:, 73));
temp.O4_VIS_203_a293SlErrx5 = cell2mat(rawNumericColumns(:, 74));
temp.O4_VIS_203_a293OffsetConstant = cell2mat(rawNumericColumns(:, 75));
temp.O4_VIS_203_a293ErrOffsetConstant = cell2mat(rawNumericColumns(:, 76));
temp.O4_VIS_203_a293ShiftSpectrum = cell2mat(rawNumericColumns(:, 77));
temp.O4_VIS_203_a293StretchSpectrum1 = cell2mat(rawNumericColumns(:, 78));
temp.O4_VIS_203_a293StretchSpectrum2 = cell2mat(rawNumericColumns(:, 79));
temp.O4_VIS_203RMS = cell2mat(rawNumericColumns(:, 80));
temp.O4_VIS_203RefZm = cell2mat(rawNumericColumns(:, 81));
temp.O4_VIS_203processing_error = cell2mat(rawNumericColumns(:, 82));
temp.O4_VIS_203SlColno2 = cell2mat(rawNumericColumns(:, 83));
temp.O4_VIS_203SlErrno2 = cell2mat(rawNumericColumns(:, 84));
temp.O4_VIS_203SlColno2a = cell2mat(rawNumericColumns(:, 85));
temp.O4_VIS_203SlErrno2a = cell2mat(rawNumericColumns(:, 86));
temp.O4_VIS_203SlColo3 = cell2mat(rawNumericColumns(:, 87));
temp.O4_VIS_203SlErro3 = cell2mat(rawNumericColumns(:, 88));
temp.O4_VIS_203SlColo4 = cell2mat(rawNumericColumns(:, 89));
temp.O4_VIS_203SlErro4 = cell2mat(rawNumericColumns(:, 90));
temp.O4_VIS_203SlColh2o = cell2mat(rawNumericColumns(:, 91));
temp.O4_VIS_203SlErrh2o = cell2mat(rawNumericColumns(:, 92));
temp.O4_VIS_203SlColRing = cell2mat(rawNumericColumns(:, 93));
temp.O4_VIS_203SlErrRing = cell2mat(rawNumericColumns(:, 94));
temp.O4_VIS_203SlColx0 = cell2mat(rawNumericColumns(:, 95));
temp.O4_VIS_203SlErrx0 = cell2mat(rawNumericColumns(:, 96));
temp.O4_VIS_203SlColx1 = cell2mat(rawNumericColumns(:, 97));
temp.O4_VIS_203SlErrx1 = cell2mat(rawNumericColumns(:, 98));
temp.O4_VIS_203SlColx2 = cell2mat(rawNumericColumns(:, 99));
temp.O4_VIS_203SlErrx2 = cell2mat(rawNumericColumns(:, 100));
temp.O4_VIS_203SlColx3 = cell2mat(rawNumericColumns(:, 101));
temp.O4_VIS_203SlErrx3 = cell2mat(rawNumericColumns(:, 102));
temp.O4_VIS_203SlColx4 = cell2mat(rawNumericColumns(:, 103));
temp.O4_VIS_203SlErrx4 = cell2mat(rawNumericColumns(:, 104));
temp.O4_VIS_203SlColx5 = cell2mat(rawNumericColumns(:, 105));
temp.O4_VIS_203SlErrx5 = cell2mat(rawNumericColumns(:, 106));
temp.O4_VIS_203OffsetConstant = cell2mat(rawNumericColumns(:, 107));
temp.O4_VIS_203ErrOffsetConstant = cell2mat(rawNumericColumns(:, 108));
temp.O4_VIS_203ShiftSpectrum = cell2mat(rawNumericColumns(:, 109));
temp.O4_VIS_203StretchSpectrum1 = cell2mat(rawNumericColumns(:, 110));
temp.O4_VIS_203StretchSpectrum2 = cell2mat(rawNumericColumns(:, 111));
temp.O4_VIS_293RMS = cell2mat(rawNumericColumns(:, 112));
temp.O4_VIS_293RefZm = cell2mat(rawNumericColumns(:, 113));
temp.O4_VIS_293processing_error = cell2mat(rawNumericColumns(:, 114));
temp.O4_VIS_293SlColno2 = cell2mat(rawNumericColumns(:, 115));
temp.O4_VIS_293SlErrno2 = cell2mat(rawNumericColumns(:, 116));
temp.O4_VIS_293SlColno2a = cell2mat(rawNumericColumns(:, 117));
temp.O4_VIS_293SlErrno2a = cell2mat(rawNumericColumns(:, 118));
temp.O4_VIS_293SlColo3 = cell2mat(rawNumericColumns(:, 119));
temp.O4_VIS_293SlErro3 = cell2mat(rawNumericColumns(:, 120));
temp.O4_VIS_293SlColo4 = cell2mat(rawNumericColumns(:, 121));
temp.O4_VIS_293SlErro4 = cell2mat(rawNumericColumns(:, 122));
temp.O4_VIS_293SlColh2o = cell2mat(rawNumericColumns(:, 123));
temp.O4_VIS_293SlErrh2o = cell2mat(rawNumericColumns(:, 124));
temp.O4_VIS_293SlColRing = cell2mat(rawNumericColumns(:, 125));
temp.O4_VIS_293SlErrRing = cell2mat(rawNumericColumns(:, 126));
temp.O4_VIS_293SlColx0 = cell2mat(rawNumericColumns(:, 127));
temp.O4_VIS_293SlErrx0 = cell2mat(rawNumericColumns(:, 128));
temp.O4_VIS_293SlColx1 = cell2mat(rawNumericColumns(:, 129));
temp.O4_VIS_293SlErrx1 = cell2mat(rawNumericColumns(:, 130));
temp.O4_VIS_293SlColx2 = cell2mat(rawNumericColumns(:, 131));
temp.O4_VIS_293SlErrx2 = cell2mat(rawNumericColumns(:, 132));
temp.O4_VIS_293SlColx3 = cell2mat(rawNumericColumns(:, 133));
temp.O4_VIS_293SlErrx3 = cell2mat(rawNumericColumns(:, 134));
temp.O4_VIS_293SlColx4 = cell2mat(rawNumericColumns(:, 135));
temp.O4_VIS_293SlErrx4 = cell2mat(rawNumericColumns(:, 136));
temp.O4_VIS_293SlColx5 = cell2mat(rawNumericColumns(:, 137));
temp.O4_VIS_293SlErrx5 = cell2mat(rawNumericColumns(:, 138));
temp.O4_VIS_293OffsetConstant = cell2mat(rawNumericColumns(:, 139));
temp.O4_VIS_293ErrOffsetConstant = cell2mat(rawNumericColumns(:, 140));
temp.O4_VIS_293ShiftSpectrum = cell2mat(rawNumericColumns(:, 141));
temp.O4_VIS_293StretchSpectrum1 = cell2mat(rawNumericColumns(:, 142));
temp.O4_VIS_293StretchSpectrum2 = cell2mat(rawNumericColumns(:, 143));
temp.O3_noXRMS = cell2mat(rawNumericColumns(:, 144));
temp.O3_noXRefZm = cell2mat(rawNumericColumns(:, 145));
temp.O3_noXprocessing_error = cell2mat(rawNumericColumns(:, 146));
temp.O3_noXSlColh2o = cell2mat(rawNumericColumns(:, 147));
temp.O3_noXSlErrh2o = cell2mat(rawNumericColumns(:, 148));
temp.O3_noXSlColo4 = cell2mat(rawNumericColumns(:, 149));
temp.O3_noXSlErro4 = cell2mat(rawNumericColumns(:, 150));
temp.O3_noXSlColRing = cell2mat(rawNumericColumns(:, 151));
temp.O3_noXSlErrRing = cell2mat(rawNumericColumns(:, 152));
temp.O3_noXSlColno2 = cell2mat(rawNumericColumns(:, 153));
temp.O3_noXSlErrno2 = cell2mat(rawNumericColumns(:, 154));
temp.O3_noXSlColo3 = cell2mat(rawNumericColumns(:, 155));
temp.O3_noXSlErro3 = cell2mat(rawNumericColumns(:, 156));
temp.O3_noXSlColx0 = cell2mat(rawNumericColumns(:, 157));
temp.O3_noXSlErrx0 = cell2mat(rawNumericColumns(:, 158));
temp.O3_noXSlColx1 = cell2mat(rawNumericColumns(:, 159));
temp.O3_noXSlErrx1 = cell2mat(rawNumericColumns(:, 160));
temp.O3_noXSlColx2 = cell2mat(rawNumericColumns(:, 161));
temp.O3_noXSlErrx2 = cell2mat(rawNumericColumns(:, 162));
temp.O3_noXSlColx3 = cell2mat(rawNumericColumns(:, 163));
temp.O3_noXSlErrx3 = cell2mat(rawNumericColumns(:, 164));
temp.O3_noXShiftSpectrum = cell2mat(rawNumericColumns(:, 165));
temp.O3_noXStretchSpectrum1 = cell2mat(rawNumericColumns(:, 166));
temp.O3_noXStretchSpectrum2 = cell2mat(rawNumericColumns(:, 167));
temp.O3RMS = cell2mat(rawNumericColumns(:, 168));
temp.O3RefZm = cell2mat(rawNumericColumns(:, 169));
temp.O3processing_error = cell2mat(rawNumericColumns(:, 170));
temp.O3SlColh2o = cell2mat(rawNumericColumns(:, 171));
temp.O3SlErrh2o = cell2mat(rawNumericColumns(:, 172));
temp.O3SlColo4 = cell2mat(rawNumericColumns(:, 173));
temp.O3SlErro4 = cell2mat(rawNumericColumns(:, 174));
temp.O3SlColRing = cell2mat(rawNumericColumns(:, 175));
temp.O3SlErrRing = cell2mat(rawNumericColumns(:, 176));
temp.O3SlColno2 = cell2mat(rawNumericColumns(:, 177));
temp.O3SlErrno2 = cell2mat(rawNumericColumns(:, 178));
temp.O3SlColo3 = cell2mat(rawNumericColumns(:, 179));
temp.O3SlErro3 = cell2mat(rawNumericColumns(:, 180));
temp.O3SlColX = cell2mat(rawNumericColumns(:, 181));
temp.O3SlErrX = cell2mat(rawNumericColumns(:, 182));
temp.O3SlColx0 = cell2mat(rawNumericColumns(:, 183));
temp.O3SlErrx0 = cell2mat(rawNumericColumns(:, 184));
temp.O3SlColx1 = cell2mat(rawNumericColumns(:, 185));
temp.O3SlErrx1 = cell2mat(rawNumericColumns(:, 186));
temp.O3SlColx2 = cell2mat(rawNumericColumns(:, 187));
temp.O3SlErrx2 = cell2mat(rawNumericColumns(:, 188));
temp.O3SlColx3 = cell2mat(rawNumericColumns(:, 189));
temp.O3SlErrx3 = cell2mat(rawNumericColumns(:, 190));
temp.O3ShiftSpectrum = cell2mat(rawNumericColumns(:, 191));
temp.O3StretchSpectrum1 = cell2mat(rawNumericColumns(:, 192));
temp.O3StretchSpectrum2 = cell2mat(rawNumericColumns(:, 193));
temp.NO2RMS = cell2mat(rawNumericColumns(:, 194));
temp.NO2RefZm = cell2mat(rawNumericColumns(:, 195));
temp.NO2processing_error = cell2mat(rawNumericColumns(:, 196));
temp.NO2SlColh2o = cell2mat(rawNumericColumns(:, 197));
temp.NO2SlErrh2o = cell2mat(rawNumericColumns(:, 198));
temp.NO2SlColo4 = cell2mat(rawNumericColumns(:, 199));
temp.NO2SlErro4 = cell2mat(rawNumericColumns(:, 200));
temp.NO2SlColRing = cell2mat(rawNumericColumns(:, 201));
temp.NO2SlErrRing = cell2mat(rawNumericColumns(:, 202));
temp.NO2SlColno2 = cell2mat(rawNumericColumns(:, 203));
temp.NO2SlErrno2 = cell2mat(rawNumericColumns(:, 204));
temp.NO2SlColo3 = cell2mat(rawNumericColumns(:, 205));
temp.NO2SlErro3 = cell2mat(rawNumericColumns(:, 206));
temp.NO2ShiftSpectrum = cell2mat(rawNumericColumns(:, 207));
temp.NO2StretchSpectrum1 = cell2mat(rawNumericColumns(:, 208));
temp.NO2StretchSpectrum2 = cell2mat(rawNumericColumns(:, 209));
temp.Fluxes355 = cell2mat(rawNumericColumns(:, 210));
temp.Fluxes360 = cell2mat(rawNumericColumns(:, 211));
temp.Fluxes380 = cell2mat(rawNumericColumns(:, 212));
temp.Fluxes385 = cell2mat(rawNumericColumns(:, 213));
temp.Fluxes390 = cell2mat(rawNumericColumns(:, 214));
temp.Fluxes405 = cell2mat(rawNumericColumns(:, 215));
temp.Fluxes420 = cell2mat(rawNumericColumns(:, 216));
temp.Fluxes425 = cell2mat(rawNumericColumns(:, 217));
temp.Fluxes435 = cell2mat(rawNumericColumns(:, 218));
temp.Fluxes440 = cell2mat(rawNumericColumns(:, 219));
temp.Fluxes445 = cell2mat(rawNumericColumns(:, 220));
temp.Fluxes450 = cell2mat(rawNumericColumns(:, 221));
temp.Fluxes455 = cell2mat(rawNumericColumns(:, 222));
temp.Fluxes460 = cell2mat(rawNumericColumns(:, 223));
temp.Fluxes470 = cell2mat(rawNumericColumns(:, 224));
temp.Fluxes490 = cell2mat(rawNumericColumns(:, 225));
temp.Fluxes500 = cell2mat(rawNumericColumns(:, 226));
temp.Fluxes532 = cell2mat(rawNumericColumns(:, 227));
temp.Fluxes550 = cell2mat(rawNumericColumns(:, 228));

function temp = read_utgbs(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   temp = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   temp = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   temp = importfile('UT-GBS_1999_reanalysis_VIS_300.ASC', 3, 4239);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/10/23 11:22:21

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[11,12]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[11,12]);
blankDates = blankDates(:,[11,12]);
invalidDates = invalidDates(:,[11,12]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
temp = table;
temp.SpecNo = cell2mat(rawNumericColumns(:, 1));
temp.Year = cell2mat(rawNumericColumns(:, 2));
temp.Fractionalday = cell2mat(rawNumericColumns(:, 3));
temp.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
temp.Scans = cell2mat(rawNumericColumns(:, 5));
temp.Tint = cell2mat(rawNumericColumns(:, 6));
temp.SZA = cell2mat(rawNumericColumns(:, 7));
temp.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 8));
temp.Elevviewingangle = cell2mat(rawNumericColumns(:, 9));
temp.Azimviewingangle = cell2mat(rawNumericColumns(:, 10));

temp.DateDDMMYYYY = dates{:, 1};
temp.Timehhmmss = dates{:, 2};
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).
% temp.DateDDMMYYYY=datenum(temp.DateDDMMYYYY);temp.Timehhmmss=datenum(temp.Timehhmmss);

temp.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 11));
temp.O4_VIS_293_a203RMS = cell2mat(rawNumericColumns(:, 12));
temp.O4_VIS_293_a203RefZm = cell2mat(rawNumericColumns(:, 13));
temp.O4_VIS_293_a203processing_error = cell2mat(rawNumericColumns(:, 14));
temp.O4_VIS_293_a203SlColno2 = cell2mat(rawNumericColumns(:, 15));
temp.O4_VIS_293_a203SlErrno2 = cell2mat(rawNumericColumns(:, 16));
temp.O4_VIS_293_a203SlColno2a = cell2mat(rawNumericColumns(:, 17));
temp.O4_VIS_293_a203SlErrno2a = cell2mat(rawNumericColumns(:, 18));
temp.O4_VIS_293_a203SlColo3 = cell2mat(rawNumericColumns(:, 19));
temp.O4_VIS_293_a203SlErro3 = cell2mat(rawNumericColumns(:, 20));
temp.O4_VIS_293_a203SlColo4 = cell2mat(rawNumericColumns(:, 21));
temp.O4_VIS_293_a203SlErro4 = cell2mat(rawNumericColumns(:, 22));
temp.O4_VIS_293_a203SlColo4a = cell2mat(rawNumericColumns(:, 23));
temp.O4_VIS_293_a203SlErro4a = cell2mat(rawNumericColumns(:, 24));
temp.O4_VIS_293_a203SlColh2o = cell2mat(rawNumericColumns(:, 25));
temp.O4_VIS_293_a203SlErrh2o = cell2mat(rawNumericColumns(:, 26));
temp.O4_VIS_293_a203SlColRing = cell2mat(rawNumericColumns(:, 27));
temp.O4_VIS_293_a203SlErrRing = cell2mat(rawNumericColumns(:, 28));
temp.O4_VIS_293_a203SlColx0 = cell2mat(rawNumericColumns(:, 29));
temp.O4_VIS_293_a203SlErrx0 = cell2mat(rawNumericColumns(:, 30));
temp.O4_VIS_293_a203SlColx1 = cell2mat(rawNumericColumns(:, 31));
temp.O4_VIS_293_a203SlErrx1 = cell2mat(rawNumericColumns(:, 32));
temp.O4_VIS_293_a203SlColx2 = cell2mat(rawNumericColumns(:, 33));
temp.O4_VIS_293_a203SlErrx2 = cell2mat(rawNumericColumns(:, 34));
temp.O4_VIS_293_a203SlColx3 = cell2mat(rawNumericColumns(:, 35));
temp.O4_VIS_293_a203SlErrx3 = cell2mat(rawNumericColumns(:, 36));
temp.O4_VIS_293_a203SlColx4 = cell2mat(rawNumericColumns(:, 37));
temp.O4_VIS_293_a203SlErrx4 = cell2mat(rawNumericColumns(:, 38));
temp.O4_VIS_293_a203SlColx5 = cell2mat(rawNumericColumns(:, 39));
temp.O4_VIS_293_a203SlErrx5 = cell2mat(rawNumericColumns(:, 40));
temp.O4_VIS_293_a203OffsetConstant = cell2mat(rawNumericColumns(:, 41));
temp.O4_VIS_293_a203ErrOffsetConstant = cell2mat(rawNumericColumns(:, 42));
temp.O4_VIS_293_a203ShiftSpectrum = cell2mat(rawNumericColumns(:, 43));
temp.O4_VIS_293_a203StretchSpectrum1 = cell2mat(rawNumericColumns(:, 44));
temp.O4_VIS_293_a203StretchSpectrum2 = cell2mat(rawNumericColumns(:, 45));
temp.O4_VIS_203_a293RMS = cell2mat(rawNumericColumns(:, 46));
temp.O4_VIS_203_a293RefZm = cell2mat(rawNumericColumns(:, 47));
temp.O4_VIS_203_a293processing_error = cell2mat(rawNumericColumns(:, 48));
temp.O4_VIS_203_a293SlColno2 = cell2mat(rawNumericColumns(:, 49));
temp.O4_VIS_203_a293SlErrno2 = cell2mat(rawNumericColumns(:, 50));
temp.O4_VIS_203_a293SlColno2a = cell2mat(rawNumericColumns(:, 51));
temp.O4_VIS_203_a293SlErrno2a = cell2mat(rawNumericColumns(:, 52));
temp.O4_VIS_203_a293SlColo3 = cell2mat(rawNumericColumns(:, 53));
temp.O4_VIS_203_a293SlErro3 = cell2mat(rawNumericColumns(:, 54));
temp.O4_VIS_203_a293SlColo4 = cell2mat(rawNumericColumns(:, 55));
temp.O4_VIS_203_a293SlErro4 = cell2mat(rawNumericColumns(:, 56));
temp.O4_VIS_203_a293SlColo4a = cell2mat(rawNumericColumns(:, 57));
temp.O4_VIS_203_a293SlErro4a = cell2mat(rawNumericColumns(:, 58));
temp.O4_VIS_203_a293SlColh2o = cell2mat(rawNumericColumns(:, 59));
temp.O4_VIS_203_a293SlErrh2o = cell2mat(rawNumericColumns(:, 60));
temp.O4_VIS_203_a293SlColRing = cell2mat(rawNumericColumns(:, 61));
temp.O4_VIS_203_a293SlErrRing = cell2mat(rawNumericColumns(:, 62));
temp.O4_VIS_203_a293SlColx0 = cell2mat(rawNumericColumns(:, 63));
temp.O4_VIS_203_a293SlErrx0 = cell2mat(rawNumericColumns(:, 64));
temp.O4_VIS_203_a293SlColx1 = cell2mat(rawNumericColumns(:, 65));
temp.O4_VIS_203_a293SlErrx1 = cell2mat(rawNumericColumns(:, 66));
temp.O4_VIS_203_a293SlColx2 = cell2mat(rawNumericColumns(:, 67));
temp.O4_VIS_203_a293SlErrx2 = cell2mat(rawNumericColumns(:, 68));
temp.O4_VIS_203_a293SlColx3 = cell2mat(rawNumericColumns(:, 69));
temp.O4_VIS_203_a293SlErrx3 = cell2mat(rawNumericColumns(:, 70));
temp.O4_VIS_203_a293SlColx4 = cell2mat(rawNumericColumns(:, 71));
temp.O4_VIS_203_a293SlErrx4 = cell2mat(rawNumericColumns(:, 72));
temp.O4_VIS_203_a293SlColx5 = cell2mat(rawNumericColumns(:, 73));
temp.O4_VIS_203_a293SlErrx5 = cell2mat(rawNumericColumns(:, 74));
temp.O4_VIS_203_a293OffsetConstant = cell2mat(rawNumericColumns(:, 75));
temp.O4_VIS_203_a293ErrOffsetConstant = cell2mat(rawNumericColumns(:, 76));
temp.O4_VIS_203_a293ShiftSpectrum = cell2mat(rawNumericColumns(:, 77));
temp.O4_VIS_203_a293StretchSpectrum1 = cell2mat(rawNumericColumns(:, 78));
temp.O4_VIS_203_a293StretchSpectrum2 = cell2mat(rawNumericColumns(:, 79));
temp.O4_VIS_203RMS = cell2mat(rawNumericColumns(:, 80));
temp.O4_VIS_203RefZm = cell2mat(rawNumericColumns(:, 81));
temp.O4_VIS_203processing_error = cell2mat(rawNumericColumns(:, 82));
temp.O4_VIS_203SlColno2 = cell2mat(rawNumericColumns(:, 83));
temp.O4_VIS_203SlErrno2 = cell2mat(rawNumericColumns(:, 84));
temp.O4_VIS_203SlColno2a = cell2mat(rawNumericColumns(:, 85));
temp.O4_VIS_203SlErrno2a = cell2mat(rawNumericColumns(:, 86));
temp.O4_VIS_203SlColo3 = cell2mat(rawNumericColumns(:, 87));
temp.O4_VIS_203SlErro3 = cell2mat(rawNumericColumns(:, 88));
temp.O4_VIS_203SlColo4 = cell2mat(rawNumericColumns(:, 89));
temp.O4_VIS_203SlErro4 = cell2mat(rawNumericColumns(:, 90));
temp.O4_VIS_203SlColh2o = cell2mat(rawNumericColumns(:, 91));
temp.O4_VIS_203SlErrh2o = cell2mat(rawNumericColumns(:, 92));
temp.O4_VIS_203SlColRing = cell2mat(rawNumericColumns(:, 93));
temp.O4_VIS_203SlErrRing = cell2mat(rawNumericColumns(:, 94));
temp.O4_VIS_203SlColx0 = cell2mat(rawNumericColumns(:, 95));
temp.O4_VIS_203SlErrx0 = cell2mat(rawNumericColumns(:, 96));
temp.O4_VIS_203SlColx1 = cell2mat(rawNumericColumns(:, 97));
temp.O4_VIS_203SlErrx1 = cell2mat(rawNumericColumns(:, 98));
temp.O4_VIS_203SlColx2 = cell2mat(rawNumericColumns(:, 99));
temp.O4_VIS_203SlErrx2 = cell2mat(rawNumericColumns(:, 100));
temp.O4_VIS_203SlColx3 = cell2mat(rawNumericColumns(:, 101));
temp.O4_VIS_203SlErrx3 = cell2mat(rawNumericColumns(:, 102));
temp.O4_VIS_203SlColx4 = cell2mat(rawNumericColumns(:, 103));
temp.O4_VIS_203SlErrx4 = cell2mat(rawNumericColumns(:, 104));
temp.O4_VIS_203SlColx5 = cell2mat(rawNumericColumns(:, 105));
temp.O4_VIS_203SlErrx5 = cell2mat(rawNumericColumns(:, 106));
temp.O4_VIS_203OffsetConstant = cell2mat(rawNumericColumns(:, 107));
temp.O4_VIS_203ErrOffsetConstant = cell2mat(rawNumericColumns(:, 108));
temp.O4_VIS_203ShiftSpectrum = cell2mat(rawNumericColumns(:, 109));
temp.O4_VIS_203StretchSpectrum1 = cell2mat(rawNumericColumns(:, 110));
temp.O4_VIS_203StretchSpectrum2 = cell2mat(rawNumericColumns(:, 111));
temp.O4_VIS_293RMS = cell2mat(rawNumericColumns(:, 112));
temp.O4_VIS_293RefZm = cell2mat(rawNumericColumns(:, 113));
temp.O4_VIS_293processing_error = cell2mat(rawNumericColumns(:, 114));
temp.O4_VIS_293SlColno2 = cell2mat(rawNumericColumns(:, 115));
temp.O4_VIS_293SlErrno2 = cell2mat(rawNumericColumns(:, 116));
temp.O4_VIS_293SlColno2a = cell2mat(rawNumericColumns(:, 117));
temp.O4_VIS_293SlErrno2a = cell2mat(rawNumericColumns(:, 118));
temp.O4_VIS_293SlColo3 = cell2mat(rawNumericColumns(:, 119));
temp.O4_VIS_293SlErro3 = cell2mat(rawNumericColumns(:, 120));
temp.O4_VIS_293SlColo4 = cell2mat(rawNumericColumns(:, 121));
temp.O4_VIS_293SlErro4 = cell2mat(rawNumericColumns(:, 122));
temp.O4_VIS_293SlColh2o = cell2mat(rawNumericColumns(:, 123));
temp.O4_VIS_293SlErrh2o = cell2mat(rawNumericColumns(:, 124));
temp.O4_VIS_293SlColRing = cell2mat(rawNumericColumns(:, 125));
temp.O4_VIS_293SlErrRing = cell2mat(rawNumericColumns(:, 126));
temp.O4_VIS_293SlColx0 = cell2mat(rawNumericColumns(:, 127));
temp.O4_VIS_293SlErrx0 = cell2mat(rawNumericColumns(:, 128));
temp.O4_VIS_293SlColx1 = cell2mat(rawNumericColumns(:, 129));
temp.O4_VIS_293SlErrx1 = cell2mat(rawNumericColumns(:, 130));
temp.O4_VIS_293SlColx2 = cell2mat(rawNumericColumns(:, 131));
temp.O4_VIS_293SlErrx2 = cell2mat(rawNumericColumns(:, 132));
temp.O4_VIS_293SlColx3 = cell2mat(rawNumericColumns(:, 133));
temp.O4_VIS_293SlErrx3 = cell2mat(rawNumericColumns(:, 134));
temp.O4_VIS_293SlColx4 = cell2mat(rawNumericColumns(:, 135));
temp.O4_VIS_293SlErrx4 = cell2mat(rawNumericColumns(:, 136));
temp.O4_VIS_293SlColx5 = cell2mat(rawNumericColumns(:, 137));
temp.O4_VIS_293SlErrx5 = cell2mat(rawNumericColumns(:, 138));
temp.O4_VIS_293OffsetConstant = cell2mat(rawNumericColumns(:, 139));
temp.O4_VIS_293ErrOffsetConstant = cell2mat(rawNumericColumns(:, 140));
temp.O4_VIS_293ShiftSpectrum = cell2mat(rawNumericColumns(:, 141));
temp.O4_VIS_293StretchSpectrum1 = cell2mat(rawNumericColumns(:, 142));
temp.O4_VIS_293StretchSpectrum2 = cell2mat(rawNumericColumns(:, 143));
temp.O3_noXRMS = cell2mat(rawNumericColumns(:, 144));
temp.O3_noXRefZm = cell2mat(rawNumericColumns(:, 145));
temp.O3_noXprocessing_error = cell2mat(rawNumericColumns(:, 146));
temp.O3_noXSlColh2o = cell2mat(rawNumericColumns(:, 147));
temp.O3_noXSlErrh2o = cell2mat(rawNumericColumns(:, 148));
temp.O3_noXSlColo4 = cell2mat(rawNumericColumns(:, 149));
temp.O3_noXSlErro4 = cell2mat(rawNumericColumns(:, 150));
temp.O3_noXSlColRing = cell2mat(rawNumericColumns(:, 151));
temp.O3_noXSlErrRing = cell2mat(rawNumericColumns(:, 152));
temp.O3_noXSlColno2 = cell2mat(rawNumericColumns(:, 153));
temp.O3_noXSlErrno2 = cell2mat(rawNumericColumns(:, 154));
temp.O3_noXSlColO3 = cell2mat(rawNumericColumns(:, 155));
temp.O3_noXSlErrO3 = cell2mat(rawNumericColumns(:, 156));
temp.O3_noXSlColx0 = cell2mat(rawNumericColumns(:, 157));
temp.O3_noXSlErrx0 = cell2mat(rawNumericColumns(:, 158));
temp.O3_noXSlColx1 = cell2mat(rawNumericColumns(:, 159));
temp.O3_noXSlErrx1 = cell2mat(rawNumericColumns(:, 160));
temp.O3_noXSlColx2 = cell2mat(rawNumericColumns(:, 161));
temp.O3_noXSlErrx2 = cell2mat(rawNumericColumns(:, 162));
temp.O3_noXSlColx3 = cell2mat(rawNumericColumns(:, 163));
temp.O3_noXSlErrx3 = cell2mat(rawNumericColumns(:, 164));
temp.O3_noXShiftSpectrum = cell2mat(rawNumericColumns(:, 165));
temp.O3_noXStretchSpectrum1 = cell2mat(rawNumericColumns(:, 166));
temp.O3_noXStretchSpectrum2 = cell2mat(rawNumericColumns(:, 167));
temp.NO2RMS = cell2mat(rawNumericColumns(:, 168));
temp.NO2RefZm = cell2mat(rawNumericColumns(:, 169));
temp.NO2processing_error = cell2mat(rawNumericColumns(:, 170));
temp.NO2SlColh2o = cell2mat(rawNumericColumns(:, 171));
temp.NO2SlErrh2o = cell2mat(rawNumericColumns(:, 172));
temp.NO2SlColo4 = cell2mat(rawNumericColumns(:, 173));
temp.NO2SlErro4 = cell2mat(rawNumericColumns(:, 174));
temp.NO2SlColRing = cell2mat(rawNumericColumns(:, 175));
temp.NO2SlErrRing = cell2mat(rawNumericColumns(:, 176));
temp.NO2SlColno2 = cell2mat(rawNumericColumns(:, 177));
temp.NO2SlErrno2 = cell2mat(rawNumericColumns(:, 178));
temp.NO2SlColo3 = cell2mat(rawNumericColumns(:, 179));
temp.NO2SlErro3 = cell2mat(rawNumericColumns(:, 180));
temp.NO2ShiftSpectrum = cell2mat(rawNumericColumns(:, 181));
temp.NO2StretchSpectrum1 = cell2mat(rawNumericColumns(:, 182));
temp.NO2StretchSpectrum2 = cell2mat(rawNumericColumns(:, 183));
temp.Fluxes355 = cell2mat(rawNumericColumns(:, 184));
temp.Fluxes360 = cell2mat(rawNumericColumns(:, 185));
temp.Fluxes380 = cell2mat(rawNumericColumns(:, 186));
temp.Fluxes385 = cell2mat(rawNumericColumns(:, 187));
temp.Fluxes390 = cell2mat(rawNumericColumns(:, 188));
temp.Fluxes405 = cell2mat(rawNumericColumns(:, 189));
temp.Fluxes420 = cell2mat(rawNumericColumns(:, 190));
temp.Fluxes425 = cell2mat(rawNumericColumns(:, 191));
temp.Fluxes435 = cell2mat(rawNumericColumns(:, 192));
temp.Fluxes440 = cell2mat(rawNumericColumns(:, 193));
temp.Fluxes445 = cell2mat(rawNumericColumns(:, 194));
temp.Fluxes450 = cell2mat(rawNumericColumns(:, 195));
temp.Fluxes455 = cell2mat(rawNumericColumns(:, 196));
temp.Fluxes460 = cell2mat(rawNumericColumns(:, 197));
temp.Fluxes470 = cell2mat(rawNumericColumns(:, 198));
temp.Fluxes490 = cell2mat(rawNumericColumns(:, 199));
temp.Fluxes500 = cell2mat(rawNumericColumns(:, 200));
temp.Fluxes532 = cell2mat(rawNumericColumns(:, 201));
temp.Fluxes550 = cell2mat(rawNumericColumns(:, 202));

function temp = read_utgbs_uv(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   temp = IMPORTFILE(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   temp = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads
%   data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   temp = importfile('UT-GBS_2009_reanalysis_UV.ASC', 3, 3020);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/11/09 10:51:58

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[11,12]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[11,12]);
blankDates = blankDates(:,[11,12]);
invalidDates = invalidDates(:,[11,12]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
temp = table;
temp.SpecNo = cell2mat(rawNumericColumns(:, 1));
temp.Year = cell2mat(rawNumericColumns(:, 2));
temp.Fractionalday = cell2mat(rawNumericColumns(:, 3));
temp.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
temp.Scans = cell2mat(rawNumericColumns(:, 5));
temp.Tint = cell2mat(rawNumericColumns(:, 6));
temp.SZA = cell2mat(rawNumericColumns(:, 7));
temp.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 8));
temp.Elevviewingangle = cell2mat(rawNumericColumns(:, 9));
temp.Azimviewingangle = cell2mat(rawNumericColumns(:, 10));
temp.DateDDMMYYYY = dates{:, 1};
temp.Timehhmmss = dates{:, 2};
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).
% temp.DateDDMMYYYY=datenum(temp.DateDDMMYYYY);temp.Timehhmmss=datenum(temp.Timehhmmss);

temp.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 11));
temp.NO2RMS = cell2mat(rawNumericColumns(:, 12));
temp.NO2RefZm = cell2mat(rawNumericColumns(:, 13));
temp.NO2processing_error = cell2mat(rawNumericColumns(:, 14));
temp.NO2SlColo4 = cell2mat(rawNumericColumns(:, 15));
temp.NO2SlErro4 = cell2mat(rawNumericColumns(:, 16));
temp.NO2SlColRing = cell2mat(rawNumericColumns(:, 17));
temp.NO2SlErrRing = cell2mat(rawNumericColumns(:, 18));
temp.NO2SlColno2 = cell2mat(rawNumericColumns(:, 19));
temp.NO2SlErrno2 = cell2mat(rawNumericColumns(:, 20));
temp.NO2SlColo3 = cell2mat(rawNumericColumns(:, 21));
temp.NO2SlErro3 = cell2mat(rawNumericColumns(:, 22));
temp.NO2SlColoclo = cell2mat(rawNumericColumns(:, 23));
temp.NO2SlErroclo = cell2mat(rawNumericColumns(:, 24));
temp.NO2SlColbro = cell2mat(rawNumericColumns(:, 25));
temp.NO2SlErrbro = cell2mat(rawNumericColumns(:, 26));
temp.NO2ShiftSpectrum = cell2mat(rawNumericColumns(:, 27));
temp.NO2StretchSpectrum1 = cell2mat(rawNumericColumns(:, 28));
temp.NO2StretchSpectrum2 = cell2mat(rawNumericColumns(:, 29));
temp.Fluxes355 = cell2mat(rawNumericColumns(:, 30));
temp.Fluxes360 = cell2mat(rawNumericColumns(:, 31));
temp.Fluxes380 = cell2mat(rawNumericColumns(:, 32));
temp.Fluxes385 = cell2mat(rawNumericColumns(:, 33));
temp.Fluxes390 = cell2mat(rawNumericColumns(:, 34));
temp.Fluxes405 = cell2mat(rawNumericColumns(:, 35));
temp.Fluxes420 = cell2mat(rawNumericColumns(:, 36));
temp.Fluxes425 = cell2mat(rawNumericColumns(:, 37));
temp.Fluxes435 = cell2mat(rawNumericColumns(:, 38));
temp.Fluxes440 = cell2mat(rawNumericColumns(:, 39));
temp.Fluxes445 = cell2mat(rawNumericColumns(:, 40));
temp.Fluxes450 = cell2mat(rawNumericColumns(:, 41));
temp.Fluxes455 = cell2mat(rawNumericColumns(:, 42));
temp.Fluxes460 = cell2mat(rawNumericColumns(:, 43));
temp.Fluxes470 = cell2mat(rawNumericColumns(:, 44));
temp.Fluxes490 = cell2mat(rawNumericColumns(:, 45));
temp.Fluxes500 = cell2mat(rawNumericColumns(:, 46));
temp.Fluxes532 = cell2mat(rawNumericColumns(:, 47));
temp.Fluxes550 = cell2mat(rawNumericColumns(:, 48));

function temp = read_pgbs_uv(filename)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   temp = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   temp = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads
%   data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   temp = importfile('PEARL-GBS_2007_reanalysis_UV.ASC', 3, 3556);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/11/09 10:56:40

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

dateFormats = {'dd/MM/yyyy', 'HH:mm:ss'};
dateFormatIndex = 1;
blankDates = cell(1,size(raw,2));
anyBlankDates = false(size(raw,1),1);
invalidDates = cell(1,size(raw,2));
anyInvalidDates = false(size(raw,1),1);
for col=[11,12]% Convert the contents of columns with dates to MATLAB datetimes using date format string.
    try
        dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %#ok<SAGROW>
    catch
        try
            % Handle dates surrounded by quotes
            dataArray{col} = cellfun(@(x) x(2:end-1), dataArray{col}, 'UniformOutput', false);
            dates{col} = datetime(dataArray{col}, 'Format', dateFormats{col==[11,12]}, 'InputFormat', dateFormats{col==[11,12]}); %%#ok<SAGROW>
        catch
            dates{col} = repmat(datetime([NaN NaN NaN]), size(dataArray{col})); %#ok<SAGROW>
        end
    end
    
    dateFormatIndex = dateFormatIndex + 1;
    blankDates{col} = cellfun(@isempty, dataArray{col});
    anyBlankDates = blankDates{col} | anyBlankDates;
    invalidDates{col} = isnan(dates{col}.Hour) - blankDates{col};
    anyInvalidDates = invalidDates{col} | anyInvalidDates;
end
dates = dates(:,[11,12]);
blankDates = blankDates(:,[11,12]);
invalidDates = invalidDates(:,[11,12]);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
temp = table;
temp.SpecNo = cell2mat(rawNumericColumns(:, 1));
temp.Year = cell2mat(rawNumericColumns(:, 2));
temp.Fractionalday = cell2mat(rawNumericColumns(:, 3));
temp.Fractionaltime = cell2mat(rawNumericColumns(:, 4));
temp.Scans = cell2mat(rawNumericColumns(:, 5));
temp.Tint = cell2mat(rawNumericColumns(:, 6));
temp.SZA = cell2mat(rawNumericColumns(:, 7));
temp.SolarAzimuthAngle = cell2mat(rawNumericColumns(:, 8));
temp.Elevviewingangle = cell2mat(rawNumericColumns(:, 9));
temp.Azimviewingangle = cell2mat(rawNumericColumns(:, 10));

temp.DateDDMMYYYY = dates{:, 1};
temp.Timehhmmss = dates{:, 2};
% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).
% temp.DateDDMMYYYY=datenum(temp.DateDDMMYYYY);temp.Timehhmmss=datenum(temp.Timehhmmss);

temp.TotalExperimentTimesec = cell2mat(rawNumericColumns(:, 11));
temp.O3RMS = cell2mat(rawNumericColumns(:, 12));
temp.O3RefZm = cell2mat(rawNumericColumns(:, 13));
temp.O3processing_error = cell2mat(rawNumericColumns(:, 14));
temp.O3SlColRing = cell2mat(rawNumericColumns(:, 15));
temp.O3SlErrRing = cell2mat(rawNumericColumns(:, 16));
temp.O3SlColno2 = cell2mat(rawNumericColumns(:, 17));
temp.O3SlErrno2 = cell2mat(rawNumericColumns(:, 18));
temp.O3SlColo3 = cell2mat(rawNumericColumns(:, 19));
temp.O3SlErro3 = cell2mat(rawNumericColumns(:, 20));
temp.O3SlColo3a = cell2mat(rawNumericColumns(:, 21));
temp.O3SlErro3a = cell2mat(rawNumericColumns(:, 22));
temp.O3SlColo3p1 = cell2mat(rawNumericColumns(:, 23));
temp.O3SlErro3p1 = cell2mat(rawNumericColumns(:, 24));
temp.O3SlColo3p2 = cell2mat(rawNumericColumns(:, 25));
temp.O3SlErro3p2 = cell2mat(rawNumericColumns(:, 26));
temp.O3SlColhcho = cell2mat(rawNumericColumns(:, 27));
temp.O3SlErrhcho = cell2mat(rawNumericColumns(:, 28));
temp.O3SlColx0 = cell2mat(rawNumericColumns(:, 29));
temp.O3SlErrx0 = cell2mat(rawNumericColumns(:, 30));
temp.O3SlColx1 = cell2mat(rawNumericColumns(:, 31));
temp.O3SlErrx1 = cell2mat(rawNumericColumns(:, 32));
temp.O3SlColx2 = cell2mat(rawNumericColumns(:, 33));
temp.O3SlErrx2 = cell2mat(rawNumericColumns(:, 34));
temp.O3SlColx3 = cell2mat(rawNumericColumns(:, 35));
temp.O3SlErrx3 = cell2mat(rawNumericColumns(:, 36));
temp.O3ShiftSpectrum = cell2mat(rawNumericColumns(:, 37));
temp.O3StretchSpectrum1 = cell2mat(rawNumericColumns(:, 38));
temp.O3StretchSpectrum2 = cell2mat(rawNumericColumns(:, 39));
temp.NO2RMS = cell2mat(rawNumericColumns(:, 40));
temp.NO2RefZm = cell2mat(rawNumericColumns(:, 41));
temp.NO2processing_error = cell2mat(rawNumericColumns(:, 42));
temp.NO2SlColo4 = cell2mat(rawNumericColumns(:, 43));
temp.NO2SlErro4 = cell2mat(rawNumericColumns(:, 44));
temp.NO2SlColRing = cell2mat(rawNumericColumns(:, 45));
temp.NO2SlErrRing = cell2mat(rawNumericColumns(:, 46));
temp.NO2SlColno2 = cell2mat(rawNumericColumns(:, 47));
temp.NO2SlErrno2 = cell2mat(rawNumericColumns(:, 48));
temp.NO2SlColo3 = cell2mat(rawNumericColumns(:, 49));
temp.NO2SlErro3 = cell2mat(rawNumericColumns(:, 50));
temp.NO2SlColoclo = cell2mat(rawNumericColumns(:, 51));
temp.NO2SlErroclo = cell2mat(rawNumericColumns(:, 52));
temp.NO2SlColbro = cell2mat(rawNumericColumns(:, 53));
temp.NO2SlErrbro = cell2mat(rawNumericColumns(:, 54));
temp.NO2ShiftSpectrum = cell2mat(rawNumericColumns(:, 55));
temp.NO2StretchSpectrum1 = cell2mat(rawNumericColumns(:, 56));
temp.NO2StretchSpectrum2 = cell2mat(rawNumericColumns(:, 57));
temp.Fluxes355 = cell2mat(rawNumericColumns(:, 58));
temp.Fluxes360 = cell2mat(rawNumericColumns(:, 59));
temp.Fluxes380 = cell2mat(rawNumericColumns(:, 60));
temp.Fluxes385 = cell2mat(rawNumericColumns(:, 61));
temp.Fluxes390 = cell2mat(rawNumericColumns(:, 62));
temp.Fluxes405 = cell2mat(rawNumericColumns(:, 63));
temp.Fluxes420 = cell2mat(rawNumericColumns(:, 64));
temp.Fluxes425 = cell2mat(rawNumericColumns(:, 65));
temp.Fluxes435 = cell2mat(rawNumericColumns(:, 66));
temp.Fluxes440 = cell2mat(rawNumericColumns(:, 67));
temp.Fluxes445 = cell2mat(rawNumericColumns(:, 68));
temp.Fluxes450 = cell2mat(rawNumericColumns(:, 69));
temp.Fluxes455 = cell2mat(rawNumericColumns(:, 70));
temp.Fluxes460 = cell2mat(rawNumericColumns(:, 71));
temp.Fluxes470 = cell2mat(rawNumericColumns(:, 72));
temp.Fluxes490 = cell2mat(rawNumericColumns(:, 73));
temp.Fluxes500 = cell2mat(rawNumericColumns(:, 74));
temp.Fluxes532 = cell2mat(rawNumericColumns(:, 75));
temp.Fluxes550 = cell2mat(rawNumericColumns(:, 76));








